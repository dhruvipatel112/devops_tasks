Create a New Terraform Module for Reusable Infrastructure Components
In this tutorial, we will learn how to create a new Terraform module for reusable infrastructure components.
===
Objective :Develop a reusable Terraform module that can be used to set up common infrastructure components.
===

## Directory Hierarchy
```
|—— .terraform
|    |—— modules
|        |—— modules.json
|    |—— providers
|        |—— registry.terraform.io
|            |—— hashicorp
|                |—— google
|                    |—— 5.38.0
|                        |—— linux_amd64
|                            |—— LICENSE.txt
|                            |—— terraform-provider-google_v5.38.0_x5
|—— .terraform.lock.hcl
|—— Example
|    |—— .terraform
|        |—— modules
|            |—— modules.json
|        |—— providers
|            |—— registry.terraform.io
|                |—— hashicorp
|                    |—— google
|                        |—— 5.38.0
|                            |—— linux_amd64
|                                |—— LICENSE.txt
|                                |—— terraform-provider-google_v5.38.0_x5
|    |—— .terraform.lock.hcl
|    |—— main.tf
|    |—— provider.tf
|    |—— terraform-infra-module
|        |—— README.md
|        |—— image.png
|        |—— main.tf
|        |—— outputs.tf
|        |—— variables.tf
|    |—— terraform.tfstate
|    |—— terraform.tfstate.backup
|—— README
|—— main.tf
|—— provider.tf
|—— terraform-module
|    |—— cloud_run
|        |—— main.tf
|    |—— compute
|        |—— main.tf
|    |—— network
|        |—— main.tf
|—— terraform.tfstate
|—— terraform.tfstate.backup
|—— terraform.tfvars
|—— variables.tf
```
## Code Details
### terraform-modules
- cloud_run
  ```
 resource "google_cloud_run_service" "cloudrun" {
  name     = "cloudrun-srv"
  location = "us-central1"
  project = "devops-task-430009"

  template {
    spec {
      containers {
        image = "us-docker.pkg.dev/cloudrun/container/hello"
      }
    }
  }

  traffic {
    percent         = 100
    latest_revision = true
  }
}


data "google_iam_policy" "noauth" {
  binding {
    role = "roles/run.invoker"
    members = [
      "allUsers",
    ]
  }
}

resource "google_cloud_run_service_iam_policy" "noauth" {
  location    = google_cloud_run_service.cloudrun.location
  project     = google_cloud_run_service.cloudrun.project
  service     = google_cloud_run_service.cloudrun.name
  policy_data = data.google_iam_policy.noauth.policy_data
}


  ```
- compute
  ```
  resource "google_project_service" "compute_api" {
  project = "devops-task-430009"
  service = "iam.googleapis.com"

  timeouts {
    create = "30m"
    update = "40m"
  }

  disable_on_destroy = false
}


  ```
- network

  ```
resource "google_compute_network" "vpc_network" {
  project                 = "devops-task-430009"
  name                    = "vpc-network"
  auto_create_subnetworks = false
  mtu                     = 1460
}

resource "google_compute_subnetwork" "network-with-private-secondary-ip-ranges" {
  name          = "test-subnetwork"
  ip_cidr_range = "10.2.0.0/16"
  region        = "us-central1"
  network       = google_compute_network.vpc_network.id
  secondary_ip_range {
    range_name    = "tf-test-secondary-range-update1"
    ip_cidr_range = "192.168.10.0/24"
  }
  depends_on = [ google_compute_network.vpc_network ]
}
  ```


